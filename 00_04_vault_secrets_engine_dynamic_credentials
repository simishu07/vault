===========================================================================================================
Setup for Dynamic Credentials
===========================================================================================================

===========================================================================================================
Setup for MySQL
===========================================================================================================
Install MySQL using Homebrew: Run the following command to install MySQL:
brew install mysql

Start MySQL: After installation, start the MySQL server:
brew services start mysql

Set up MySQL: Secure your MySQL installation and set up a root password if needed:
mysql_secure_installation

Log into MySQL: Log in using the MySQL root user (default with no password if you have not set one):
mysql -u root -p

===========================================================================================================
Configure HCP Vault
===========================================================================================================
1. Ensure VAULT_ADDR variable is set in bash
2. Ensure VAULT_TOKEN is recent and set in bash

As the MYSQL Database is installed using brew and Vault deployed as SaaS, we need to tunnel the mysql connection.
We will use Pinngy to do connect MYSQL to HCP-Vault:

ssh -p 443 -R0:localhost:3306 -o StrictHostKeyChecking=no -o ServerAliveInterval=30 NMi1X0nm027+tcp@a.pinggy.io
This will provide a internal accessible URL for 60 mins=>rnndx-223-190-86-1.a.free.pinggy.link:43275

export MYSQL_TUNNEL=rnccu-223-190-86-1.a.free.pinggy.link:33503

===============================================================
Enable Database Backend for the VAULT
===============================================================
vault write demo-mysql/config/my-mysql-database \
    plugin_name=mysql-database-plugin \
    connection_url="{{username}}:{{password}}@tcp(13.50.80.73:3306)/" \
    allowed_roles="mysqlrole" \
    username="vault" \
    password="Qwerty@1234"

vault write demo-mysql/roles/mysqlrole \
    db_name=my-mysql-database \
    creation_statements="CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';GRANT SELECT ON *.* TO '{{name}}'@'%';" \
    default_ttl="1h" \
    max_ttl="24h"

===============================================================
Create temporary credentials using VAULT commandline
===============================================================
vault read demo-mysql/creds/mysqlrole -format=json | jq '.data | {username: .username, password: .password}'

===============================================================
Get list of credentials created in MySQL
===============================================================
vault list sys/leases/lookup/demo-mysql/creds/mysqlrole

===============================================================
Renew Credentials by 1HR
=============================================================== 
export LEASE_ID=$(vault list -format=json sys/leases/lookup/demo-mysql/creds/mysqlrole | jq -r ".[0]")
vault lease renew demo-mysql/creds/mysqlrole/$LEASE_ID

===============================================================
Revoke credential created by VAULT
===============================================================
LEASE_ID=$(vault list -format=json sys/leases/lookup/demo-mysql/creds/mysqlrole | jq -r ".[0]")
vault lease revoke demo-mysql/creds/mysqlrole/$LEASE_ID

===============================================================
Revoke ALL credentials created by VAULT
===============================================================
vault lease revoke -prefix demo-mysql/creds/mysqlrole


===========================================================================================================:
Setup NGINX, NODE to Show all MYSQL USers on a Webpage:
===========================================================================================================:
brew install nginx node 

Create a separate directory:
mkdir mysql-html-display
cd mysql-html-display
npm init -y
npm install express mysql2 cors

Create a server.js file to handle API requests and connect to MySQL:
code server.js

Run the Node.js server: Start the server by running:
node server.js

Create an index.html file with JavaScript to fetch and display data, mount it to nginx index.html:
code /opt/homebrew/var/www/index.html

Check syntax using nginx -t
Reload nginx using nginx -s reload
open http://localhost:8080 to get list of users in MYSQL USER DB.


